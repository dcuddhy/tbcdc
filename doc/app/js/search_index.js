var search_data = {"index":{"searchIndex":["applicationcontroller","applicationhelper","article","beard","beardscontroller","date","facebookapi","feedjira","feed","feedentryutilities","feedutilities","classmethods","noparseravailable","parser","atom","atomentry","atomfeedburner","atomfeedburnerentry","googledocsatom","googledocsatomentry","itunesrss","itunesrssitem","itunesrssowner","rss","rssentry","rssfeedburner","rssfeedburnerentry","preprocessor","instagramapi","object","pagescontroller","sessionscontroller","string","time","tumblrapi","user","userscontroller","[]()","[]=()","able_to_parse?()","add_common_feed_element()","add_common_feed_elements()","add_common_feed_entry_element()","add_common_feed_entry_elements()","add_feed_class()","add_feed_to_multi()","add_url_to_multi()","auth_hash()","call_on_each_feed_entry()","create()","create()","decode_content()","destroy()","determine_feed_parser_for_xml()","each()","edit()","etag_from_header()","feed_classes()","feed_url()","feed_url()","feed_utils_to_gm_time()","feed_utils_to_local_time()","fetch_and_parse()","fetch_raw()","get_instagram_posts()","get_tumblr_posts()","has_new_entries?()","id()","included()","index()","index()","index()","koala()","last_modified()","last_modified()","last_modified_from_header()","login()","new()","new()","new_entries()","parse()","parse()","parse_datetime()","parse_safely()","parse_with()","preprocess()","preprocess()","preprocess()","preprocess_xml()","preprocess_xml=()","published()","published=()","sanitize()","sanitize!()","sanitize!()","sanitize_entries!()","search()","setup_easy()","show()","tbc()","to_xml()","update()","update()","update_attribute()","update_from_feed()","updated=()","updated?()","url()","url()","url()","url()","url()","url()","videos()","wob()","readme"],"longSearchIndex":["applicationcontroller","applicationhelper","article","beard","beardscontroller","date","facebookapi","feedjira","feedjira::feed","feedjira::feedentryutilities","feedjira::feedutilities","feedjira::feedutilities::classmethods","feedjira::noparseravailable","feedjira::parser","feedjira::parser::atom","feedjira::parser::atomentry","feedjira::parser::atomfeedburner","feedjira::parser::atomfeedburnerentry","feedjira::parser::googledocsatom","feedjira::parser::googledocsatomentry","feedjira::parser::itunesrss","feedjira::parser::itunesrssitem","feedjira::parser::itunesrssowner","feedjira::parser::rss","feedjira::parser::rssentry","feedjira::parser::rssfeedburner","feedjira::parser::rssfeedburnerentry","feedjira::preprocessor","instagramapi","object","pagescontroller","sessionscontroller","string","time","tumblrapi","user","userscontroller","feedjira::feedentryutilities#[]()","feedjira::feedentryutilities#[]=()","feedjira::parser::itunesrss::able_to_parse?()","feedjira::feed::add_common_feed_element()","feedjira::feed::add_common_feed_elements()","feedjira::feed::add_common_feed_entry_element()","feedjira::feed::add_common_feed_entry_elements()","feedjira::feed::add_feed_class()","feedjira::feed::add_feed_to_multi()","feedjira::feed::add_url_to_multi()","sessionscontroller#auth_hash()","feedjira::feed::call_on_each_feed_entry()","beardscontroller#create()","sessionscontroller#create()","feedjira::feed::decode_content()","beardscontroller#destroy()","feedjira::feed::determine_feed_parser_for_xml()","feedjira::feedentryutilities#each()","beardscontroller#edit()","feedjira::feed::etag_from_header()","feedjira::feed::feed_classes()","feedjira::parser::atom#feed_url()","feedjira::parser::googledocsatom#feed_url()","date#feed_utils_to_gm_time()","date#feed_utils_to_local_time()","feedjira::feed::fetch_and_parse()","feedjira::feed::fetch_raw()","instagramapi#get_instagram_posts()","tumblrapi#get_tumblr_posts()","feedjira::feedutilities#has_new_entries?()","feedjira::feedentryutilities#id()","feedjira::feedutilities::included()","beardscontroller#index()","pagescontroller#index()","userscontroller#index()","user::koala()","feedjira::feedentryutilities#last_modified()","feedjira::feedutilities#last_modified()","feedjira::feed::last_modified_from_header()","userscontroller#login()","beardscontroller#new()","feedjira::preprocessor::new()","feedjira::feedutilities#new_entries()","feedjira::feed::parse()","feedjira::feedutilities::classmethods#parse()","feedjira::feedentryutilities#parse_datetime()","time::parse_safely()","feedjira::feed::parse_with()","feedjira::feedutilities::classmethods#preprocess()","feedjira::parser::atom::preprocess()","feedjira::parser::atomfeedburner::preprocess()","feedjira::feedutilities::classmethods#preprocess_xml()","feedjira::feedutilities::classmethods#preprocess_xml=()","feedjira::feedentryutilities#published()","feedjira::feedentryutilities#published=()","string#sanitize()","feedjira::feedentryutilities#sanitize!()","string#sanitize!()","feedjira::feedutilities#sanitize_entries!()","object::search()","feedjira::feed::setup_easy()","beardscontroller#show()","facebookapi#tbc()","feedjira::preprocessor#to_xml()","beardscontroller#update()","feedjira::feed::update()","feedjira::feedutilities#update_attribute()","feedjira::feedutilities#update_from_feed()","feedjira::feedentryutilities#updated=()","feedjira::feedutilities#updated?()","feedjira::parser::atom#url()","feedjira::parser::atomentry#url()","feedjira::parser::atomfeedburnerentry#url()","feedjira::parser::googledocsatom#url()","feedjira::parser::googledocsatomentry#url()","feedjira::parser::rssfeedburnerentry#url()","pagescontroller#videos()","pagescontroller#wob()",""],"info":[["ApplicationController","","ApplicationController.html","",""],["ApplicationHelper","","ApplicationHelper.html","",""],["Article","","Article.html","",""],["Beard","","Beard.html","",""],["BeardsController","","BeardsController.html","",""],["Date","","Date.html","","<p>Date code pulled and adapted from: Ruby Cookbook by Lucas Carlson and\nLeonard Richardson Published by …\n"],["Facebookapi","","Facebookapi.html","",""],["Feedjira","","Feedjira.html","",""],["Feedjira::Feed","","Feedjira/Feed.html","",""],["Feedjira::FeedEntryUtilities","","Feedjira/FeedEntryUtilities.html","",""],["Feedjira::FeedUtilities","","Feedjira/FeedUtilities.html","",""],["Feedjira::FeedUtilities::ClassMethods","","Feedjira/FeedUtilities/ClassMethods.html","",""],["Feedjira::NoParserAvailable","","Feedjira/NoParserAvailable.html","",""],["Feedjira::Parser","","Feedjira/Parser.html","",""],["Feedjira::Parser::Atom","","Feedjira/Parser/Atom.html","","<p>Parser for dealing with Atom feeds.\n"],["Feedjira::Parser::AtomEntry","","Feedjira/Parser/AtomEntry.html","","<p>Parser for dealing with Atom feed entries.\n"],["Feedjira::Parser::AtomFeedBurner","","Feedjira/Parser/AtomFeedBurner.html","","<p>Parser for dealing with Feedburner Atom feeds.\n"],["Feedjira::Parser::AtomFeedBurnerEntry","","Feedjira/Parser/AtomFeedBurnerEntry.html","","<p>Parser for dealing with Feedburner Atom feed entries.\n"],["Feedjira::Parser::GoogleDocsAtom","","Feedjira/Parser/GoogleDocsAtom.html","",""],["Feedjira::Parser::GoogleDocsAtomEntry","","Feedjira/Parser/GoogleDocsAtomEntry.html","",""],["Feedjira::Parser::ITunesRSS","","Feedjira/Parser/ITunesRSS.html","","<p>iTunes is RSS 2.0 + some apple extensions Source:\nwww.apple.com/itunes/whatson/podcasts/specs.html\n"],["Feedjira::Parser::ITunesRSSItem","","Feedjira/Parser/ITunesRSSItem.html","","<p>iTunes extensions to the standard RSS2.0 item Source:\nwww.apple.com/itunes/whatson/podcasts/specs.html …\n"],["Feedjira::Parser::ITunesRSSOwner","","Feedjira/Parser/ITunesRSSOwner.html","",""],["Feedjira::Parser::RSS","","Feedjira/Parser/RSS.html","","<p>Parser for dealing with RSS feeds.\n"],["Feedjira::Parser::RSSEntry","","Feedjira/Parser/RSSEntry.html","","<p>Parser for dealing with RDF feed entries.\n"],["Feedjira::Parser::RSSFeedBurner","","Feedjira/Parser/RSSFeedBurner.html","","<p>Parser for dealing with RSS feeds.\n"],["Feedjira::Parser::RSSFeedBurnerEntry","","Feedjira/Parser/RSSFeedBurnerEntry.html","","<p>Parser for dealing with RDF feed entries.\n"],["Feedjira::Preprocessor","","Feedjira/Preprocessor.html","",""],["Instagramapi","","Instagramapi.html","",""],["Object","","Object.html","",""],["PagesController","","PagesController.html","",""],["SessionsController","","SessionsController.html","",""],["String","","String.html","",""],["Time","","Time.html","",""],["Tumblrapi","","Tumblrapi.html","",""],["User","","User.html","",""],["UsersController","","UsersController.html","",""],["[]","Feedjira::FeedEntryUtilities","Feedjira/FeedEntryUtilities.html#method-i-5B-5D","(field)",""],["[]=","Feedjira::FeedEntryUtilities","Feedjira/FeedEntryUtilities.html#method-i-5B-5D-3D","(field, value)",""],["able_to_parse?","Feedjira::Parser::ITunesRSS","Feedjira/Parser/ITunesRSS.html#method-c-able_to_parse-3F","(xml)",""],["add_common_feed_element","Feedjira::Feed","Feedjira/Feed.html#method-c-add_common_feed_element","(element_tag, options = {})","<p>Makes all registered feeds types look for the passed in element to parse.\nThis is actually just a call …\n"],["add_common_feed_elements","Feedjira::Feed","Feedjira/Feed.html#method-c-add_common_feed_elements","(element_tag, options = {})","<p>Makes all registered feeds types look for the passed in elements to parse.\nThis is actually just a call …\n"],["add_common_feed_entry_element","Feedjira::Feed","Feedjira/Feed.html#method-c-add_common_feed_entry_element","(element_tag, options = {})","<p>Makes all registered entry types look for the passed in element to parse.\nThis is actually just a call …\n"],["add_common_feed_entry_elements","Feedjira::Feed","Feedjira/Feed.html#method-c-add_common_feed_entry_elements","(element_tag, options = {})","<p>Makes all registered entry types look for the passed in elements to parse.\nThis is actually just a call …\n"],["add_feed_class","Feedjira::Feed","Feedjira/Feed.html#method-c-add_feed_class","(klass)","<p>Adds a new feed parsing class that will be used for parsing.\n<p>Parameters\n<p>klass&lt;Constant&gt; &mdash; The class/constant …\n"],["add_feed_to_multi","Feedjira::Feed","Feedjira/Feed.html#method-c-add_feed_to_multi","(multi, feed, feed_queue, responses, options)","<p>An abstraction for adding a feed by a Feed object to the passed Curb::multi\nstack.\n<p>Parameters\n<p>multi&lt;Curl::Multi&gt; … &mdash; "],["add_url_to_multi","Feedjira::Feed","Feedjira/Feed.html#method-c-add_url_to_multi","(multi, url, url_queue, responses, options)","<p>An abstraction for adding a feed by URL to the passed Curb::multi stack.\n<p>Parameters\n<p>multi&lt;Curl::Multi&gt; … &mdash; "],["auth_hash","SessionsController","SessionsController.html#method-i-auth_hash","()",""],["call_on_each_feed_entry","Feedjira::Feed","Feedjira/Feed.html#method-c-call_on_each_feed_entry","(method, *parameters)","<p>Call a method on all feed entries classes.\n<p>Parameters\n<p>method&lt;Symbol&gt; &mdash; The method name\n"],["create","BeardsController","BeardsController.html#method-i-create","()",""],["create","SessionsController","SessionsController.html#method-i-create","()",""],["decode_content","Feedjira::Feed","Feedjira/Feed.html#method-c-decode_content","(c)","<p>Decodes the XML document if it was compressed.\n<p>Parameters\n<p>curl_request&lt;Curl::Easy&gt; &mdash; The Curl::Easy …\n"],["destroy","BeardsController","BeardsController.html#method-i-destroy","()",""],["determine_feed_parser_for_xml","Feedjira::Feed","Feedjira/Feed.html#method-c-determine_feed_parser_for_xml","(xml)","<p>Determines the correct parser class to use for parsing the feed.\n<p>Parameters\n<p>xml&lt;String&gt; &mdash; The XML that …\n"],["each","Feedjira::FeedEntryUtilities","Feedjira/FeedEntryUtilities.html#method-i-each","()",""],["edit","BeardsController","BeardsController.html#method-i-edit","()",""],["etag_from_header","Feedjira::Feed","Feedjira/Feed.html#method-c-etag_from_header","(header)","<p>Determines the etag from the request headers.\n<p>Parameters\n<p>header&lt;String&gt; &mdash; Raw request header returned …\n"],["feed_classes","Feedjira::Feed","Feedjira/Feed.html#method-c-feed_classes","()","<p>Provides a list of registered feed parsing classes.\n<p>Returns\n<p>A array of class names.\n"],["feed_url","Feedjira::Parser::Atom","Feedjira/Parser/Atom.html#method-i-feed_url","()",""],["feed_url","Feedjira::Parser::GoogleDocsAtom","Feedjira/Parser/GoogleDocsAtom.html#method-i-feed_url","()",""],["feed_utils_to_gm_time","Date","Date.html#method-i-feed_utils_to_gm_time","()",""],["feed_utils_to_local_time","Date","Date.html#method-i-feed_utils_to_local_time","()",""],["fetch_and_parse","Feedjira::Feed","Feedjira/Feed.html#method-c-fetch_and_parse","(urls, options = {})","<p>Fetches and returns the parsed XML for each URL provided.\n<p>Parameters\n<p>urls&lt;String&gt; or &lt;Array&gt; … &mdash; "],["fetch_raw","Feedjira::Feed","Feedjira/Feed.html#method-c-fetch_raw","(urls, options = {})","<p>Fetches and returns the raw XML for each URL provided.\n<p>Parameters\n<p>urls&lt;String&gt; or &lt;Array&gt; &mdash; "],["get_instagram_posts","Instagramapi","Instagramapi.html#method-i-get_instagram_posts","()",""],["get_tumblr_posts","Tumblrapi","Tumblrapi.html#method-i-get_tumblr_posts","()",""],["has_new_entries?","Feedjira::FeedUtilities","Feedjira/FeedUtilities.html#method-i-has_new_entries-3F","()",""],["id","Feedjira::FeedEntryUtilities","Feedjira/FeedEntryUtilities.html#method-i-id","()","<p>Returns the id of the entry or its url if not id is present, as some\nformats don&#39;t support it\n"],["included","Feedjira::FeedUtilities","Feedjira/FeedUtilities.html#method-c-included","(base)",""],["index","BeardsController","BeardsController.html#method-i-index","()",""],["index","PagesController","PagesController.html#method-i-index","()",""],["index","UsersController","UsersController.html#method-i-index","()",""],["koala","User","User.html#method-c-koala","(auth)",""],["last_modified","Feedjira::FeedEntryUtilities","Feedjira/FeedEntryUtilities.html#method-i-last_modified","()",""],["last_modified","Feedjira::FeedUtilities","Feedjira/FeedUtilities.html#method-i-last_modified","()",""],["last_modified_from_header","Feedjira::Feed","Feedjira/Feed.html#method-c-last_modified_from_header","(header)","<p>Determines the last modified date from the request headers.\n<p>Parameters\n<p>header&lt;String&gt; &mdash; Raw request …\n"],["login","UsersController","UsersController.html#method-i-login","()",""],["new","BeardsController","BeardsController.html#method-i-new","()",""],["new","Feedjira::Preprocessor","Feedjira/Preprocessor.html#method-c-new","(xml)",""],["new_entries","Feedjira::FeedUtilities","Feedjira/FeedUtilities.html#method-i-new_entries","()",""],["parse","Feedjira::Feed","Feedjira/Feed.html#method-c-parse","(xml, &block)","<p>Takes a raw XML feed and attempts to parse it. If no parser is available a\nFeedjira::NoParserAvailable …\n"],["parse","Feedjira::FeedUtilities::ClassMethods","Feedjira/FeedUtilities/ClassMethods.html#method-i-parse","(xml, &block)",""],["parse_datetime","Feedjira::FeedEntryUtilities","Feedjira/FeedEntryUtilities.html#method-i-parse_datetime","(string)",""],["parse_safely","Time","Time.html#method-c-parse_safely","(dt)","<p>Parse a time string and convert it to UTC without raising errors. Parses a\nflattened 14-digit time (YYYYmmddHHMMMSS) …\n"],["parse_with","Feedjira::Feed","Feedjira/Feed.html#method-c-parse_with","(parser, xml, &block)","<p>Passes raw XML and callbacks to a parser.\n<p>Parameters\n<p>parser&lt;Object&gt; &mdash; The parser to pass arguments …\n"],["preprocess","Feedjira::FeedUtilities::ClassMethods","Feedjira/FeedUtilities/ClassMethods.html#method-i-preprocess","(xml)",""],["preprocess","Feedjira::Parser::Atom","Feedjira/Parser/Atom.html#method-c-preprocess","(xml)",""],["preprocess","Feedjira::Parser::AtomFeedBurner","Feedjira/Parser/AtomFeedBurner.html#method-c-preprocess","(xml)",""],["preprocess_xml","Feedjira::FeedUtilities::ClassMethods","Feedjira/FeedUtilities/ClassMethods.html#method-i-preprocess_xml","()",""],["preprocess_xml=","Feedjira::FeedUtilities::ClassMethods","Feedjira/FeedUtilities/ClassMethods.html#method-i-preprocess_xml-3D","(value)",""],["published","Feedjira::FeedEntryUtilities","Feedjira/FeedEntryUtilities.html#method-i-published","()",""],["published=","Feedjira::FeedEntryUtilities","Feedjira/FeedEntryUtilities.html#method-i-published-3D","(val)","<p>Writer for published. By default, we keep the “oldest” publish time found.\n"],["sanitize","String","String.html#method-i-sanitize","()",""],["sanitize!","Feedjira::FeedEntryUtilities","Feedjira/FeedEntryUtilities.html#method-i-sanitize-21","()",""],["sanitize!","String","String.html#method-i-sanitize-21","()",""],["sanitize_entries!","Feedjira::FeedUtilities","Feedjira/FeedUtilities.html#method-i-sanitize_entries-21","()",""],["search","Object","Object.html#method-c-search","(search, page)",""],["setup_easy","Feedjira::Feed","Feedjira/Feed.html#method-c-setup_easy","(curl, options={})","<p>Setup curl from options. Possible parameters:\n<p>:user_agent          - overrides the default user agent. …\n"],["show","BeardsController","BeardsController.html#method-i-show","()",""],["tbc","Facebookapi","Facebookapi.html#method-i-tbc","()",""],["to_xml","Feedjira::Preprocessor","Feedjira/Preprocessor.html#method-i-to_xml","()",""],["update","BeardsController","BeardsController.html#method-i-update","()",""],["update","Feedjira::Feed","Feedjira/Feed.html#method-c-update","(feeds, options = {})","<p>Updates each feed for each Feed object provided.\n<p>Parameters\n<p>feeds&lt;Feed&gt; or &lt;Array&gt; &mdash; A single …\n"],["update_attribute","Feedjira::FeedUtilities","Feedjira/FeedUtilities.html#method-i-update_attribute","(feed, name)",""],["update_from_feed","Feedjira::FeedUtilities","Feedjira/FeedUtilities.html#method-i-update_from_feed","(feed)",""],["updated=","Feedjira::FeedEntryUtilities","Feedjira/FeedEntryUtilities.html#method-i-updated-3D","(val)","<p>Writer for updated. By default, we keep the most recent update time found.\n"],["updated?","Feedjira::FeedUtilities","Feedjira/FeedUtilities.html#method-i-updated-3F","()",""],["url","Feedjira::Parser::Atom","Feedjira/Parser/Atom.html#method-i-url","()",""],["url","Feedjira::Parser::AtomEntry","Feedjira/Parser/AtomEntry.html#method-i-url","()",""],["url","Feedjira::Parser::AtomFeedBurnerEntry","Feedjira/Parser/AtomFeedBurnerEntry.html#method-i-url","()",""],["url","Feedjira::Parser::GoogleDocsAtom","Feedjira/Parser/GoogleDocsAtom.html#method-i-url","()",""],["url","Feedjira::Parser::GoogleDocsAtomEntry","Feedjira/Parser/GoogleDocsAtomEntry.html#method-i-url","()",""],["url","Feedjira::Parser::RSSFeedBurnerEntry","Feedjira/Parser/RSSFeedBurnerEntry.html#method-i-url","()",""],["videos","PagesController","PagesController.html#method-i-videos","()",""],["wob","PagesController","PagesController.html#method-i-wob","()",""],["README","","README_rdoc.html","","<p>## See this project live: tbcdc.herokuapp.com <br>\n<p>## Product Description\n<p>A curated collection of beard-centric …\n"]]}}